#!/bin/sh

set -e

msg() {
	local format="$1"
	shift 1
	printf "%s: $format\n" "$0" "$@"
}

die() {
	local status="$1"
	shift 1
	msg "$@" 1>&2
	exit "$status"
}

usage() {
cat <<EOF
Usage: $0 [OPTION]… [CONTAINER]

  -4, --ipv4 IPV4               container IPv4 address
  -6, --ipv6 IPV6               container IPv6 address
      --forwarding              enable packet forwarding

      --host-ipv4 IPV6          host IPv4 address [169.254.0.1]
      --host-ipv6 IPV6          host IPv6 address [fe80::1]

  -i, --interface IFACE         container interface name [eth0]
      --host-interface IFACE    host interface name [nw-CONTAINER]
      --mtu SIZE                maximum transmission unit

      --temp-interface IFACE    temporary container interface name [nwt-PID]
      --temp-namespace NS       temporary network namespace name [nwt-PID]

      --paranoid                create restrictive Ethernet filter rules

      --trace                   trace actions
  -h, --help                    display this help and exit
EOF
}

optreq() {
	if [ "$1" -lt 2 ]
	then
		die 1 "Option requires an argument: %s" "$2"
	fi
}

# Parse command‐line arguments
while [ $# -gt 0 ]
do
	case "$1" in
	(--help|-h)
		usage
		exit 0;;

	(--ipv4|-4)
		optreq $# "$1"
		ipv4="$2"
		shift;;

	(--ipv6|-6)
		optreq $# "$1"
		ipv6="$2"
		shift;;

	(--host-ipv4)
		optreq $# "$1"
		host_ipv4="$2"
		shift;;

	(--host-ipv6)
		optreq $# "$1"
		host_ipv6="$2"
		shift;;

	(--interface|-i)
		optreq $# "$1"
		interface="$2"
		shift;;

	(--host-interface)
		optreq $# "$1"
		host_interface="$2"
		shift;;

	(--temp-interface)
		optreq $# "$1"
		temp_interface="$2"
		shift;;

	(--temp-namespace)
		optreq $# "$1"
		temp_namespace="$2"
		shift;;

	(--mtu)
		optreq $# "$1"
		mtu="$2"
		shift;;

	(--forwarding)
		forwarding=1;;

	(--paranoid)
		paranoid=1;;

	(--trace)
		trace=1;;

	(--)
		shift
		break;;

	(-*)
		die 1 "Unrecognised option: %s" "$1";;

	(*)
		break;;
	esac

	shift
done

if [ $# -lt 1 ]
then
	die 1 "Docker container ID required."
elif [ $# -gt 1 ]
then
	shift
	die 1 "Stray command-line arguments: %s" "$*"
fi

# Enable tracing
if [ -n "$trace" ]
then
	set -x
fi

# Docker container ID
id="$(docker inspect --format '{{ printf "%.12s" .Id }}' "$1")"

# Default values
: ${interface:=eth0}
: ${host_interface:=nw-$id}
: ${temp_interface:=nwt-$$}
: ${temp_namespace:=nwt-$$}
: ${host_ipv4:=169.254.0.1}
: ${host_ipv6:=fe80::1}

# Determine Docker container PID
pid="$(docker inspect --format='{{ .State.Pid | printf "%.f" }}' "$id")"

# Create temporary name for network namespace
mkdir -p /var/run/netns
ln -f -s "/proc/$pid/ns/net" "/var/run/netns/$temp_namespace"

# Remove temporary namespace on exit
clean_netns() {
	rm -f "/var/run/netns/$temp_namespace"
}

trap 'clean_netns' EXIT

# Create veth pair
ip link add "$host_interface" ${mtu:+mtu "$mtu"} type veth peer name "$temp_interface" ${mtu:+mtu "$mtu"}

# Remove veth pair on failure
clean_veth() {
	ip link del "$host_interface"
}

trap 'clean_veth; clean_netns' EXIT

# Save link-layer addresses
host_ll="$(cat "/sys/class/net/$host_interface/address")"
temp_ll="$(cat "/sys/class/net/$temp_interface/address")"

# Disable ARP on interfaces
ip link set "$host_interface" arp off
ip link set "$temp_interface" arp off

# Enable reversed-path source validation
sysctl -q -w "net.ipv4.conf.${host_interface}.rp_filter=1"

# Move interface to container namespace
ip link set "$temp_interface" netns "$temp_namespace"

# Setup Ethernet filter rules
if [ -n "$paranoid" ]
then
	eb_in="$host_interface-in"
	eb_out="$host_interface-out"
	eb_fw="$host_interface-fw"

	# INPUT
	if ebtables -L "$eb_in" >/dev/null 2>&1
	then
		ebtables -F "$eb_in"
	else
		ebtables -N "$eb_in" -P DROP
		ebtables -A INPUT -i "$host_interface" -j "$eb_in"
	fi

	# OUTPUT
	if ebtables -L "$eb_out" >/dev/null 2>&1
	then
		ebtables -F "$eb_out"
	else
		ebtables -N "$eb_out" -P DROP
		ebtables -A OUTPUT -o "$host_interface" -j "$eb_out"
	fi

	# FORWARD
	if ebtables -L "$eb_fw" >/dev/null 2>&1
	then
		ebtables -F "$eb_fw"
	else
		ebtables -N "$eb_fw" -P DROP
		ebtables -A FORWARD -i "$host_interface" -j "$eb_fw"
		ebtables -A FORWARD -o "$host_interface" -j "$eb_fw"
	fi
fi

# Setup host interface
ip link set "$host_interface" up

if [ -n "$ipv4" ]
then
	# IPv4 Ethernet filter rules
	if [ -n "$paranoid" ]
	then
		# Incoming IPv4
		ebtables -A "$eb_in" \
			--protocol ipv4 \
			--source "$temp_ll" \
			--destination "$host_ll" \
			--ip-source "$ipv4" \
			-j ACCEPT

		# Outgoing IPv4
		ebtables -A "$eb_out" \
			--protocol ipv4 \
			--source "$host_ll" \
			--destination "$temp_ll" \
			--ip-destination "$ipv4" \
			-j ACCEPT
	fi

	# Setup address, neighbour table and host route
	ip -4 address add "$host_ipv4" peer "$ipv4/32" scope link dev "$host_interface"
	ip -4 neighbour replace "$ipv4" lladdr "$temp_ll" nud permanent dev "$host_interface"
fi

if [ -n "$ipv6" ]
then
	# Disable IPv6 autoconfiguration
	sysctl -q -w "net.ipv6.conf.${host_interface}.autoconf=0"

	# Ignore router advertisements
	sysctl -q -w "net.ipv6.conf.${host_interface}.accept_ra=0"

	# IPv6 Ethernet filter rules
	if [ -n "$paranoid" ]
	then
		eb_ipv6="$host_interface-ipv6"

		if ebtables -L "$eb_ipv6" >/dev/null 2>&1
		then
			ebtables -F "$eb_ipv6"
		else
			ebtables -N "$eb_ipv6" -P ACCEPT
		fi

		# Filter IPv6 ICMP
		ebtables -A "$eb_ipv6" \
			--protocol ipv6 \
			--ip6-protocol ipv6-icmp \
			--ip6-icmp-type \! 1:129/0:255 \
			-j DROP

		# Incoming IPv6
		ebtables -A "$eb_in" \
			--protocol ipv6 \
			--source "$temp_ll" \
			--destination "$host_ll" \
			--ip6-source "$ipv6" \
			-j "$eb_ipv6"

		# Outgoing IPv6
		ebtables -A "$eb_out" \
			--protocol ipv6 \
			--source "$host_ll" \
			--destination "$temp_ll" \
			--ip6-destination "$ipv6" \
			-j "$eb_ipv6"
	fi

	# Setup address, neighbour table and host route
	ip -6 address add "$host_ipv6" peer "$ipv6/128" scope link dev "$host_interface"
	ip -6 neighbour replace "$ipv6" lladdr "$temp_ll" nud permanent dev "$host_interface"
	ip -6 route replace "$ipv6/128" dev "$host_interface"
else
	# Disable IPv6
	sysctl -q -w "net.ipv6.conf.${host_interface}.disable_ipv6=1"
fi

# Setup container interface
ip netns exec "$temp_namespace" env \
	interface="$interface" \
	temp_interface="$temp_interface" \
	ipv4="$ipv4" \
	ipv6="$ipv6" \
	host_ipv4="$host_ipv4" \
	host_ipv6="$host_ipv6" \
	host_ll="$host_ll" \
	sh -e ${trace:+-x} <<EOF
ip link set "\$temp_interface" name "\$interface"
ip link set "\$interface" up

if [ -n "\$ipv4" ]
then
	ip -4 address add "\$ipv4" peer "\$host_ipv4/32" dev "\$interface"
	ip -4 neighbour replace "\$host_ipv4" lladdr "\$host_ll" nud permanent dev "\$interface"
	ip -4 route add default via "\$host_ipv4" dev "\$interface"
fi

if [ -n "\$ipv6" ]
then
	# Disable IPv6 autoconfiguration
	sysctl -q -w "net.ipv6.conf.\${interface}.autoconf=0"

	# Ignore router advertisements
	sysctl -q -w "net.ipv6.conf.\${interface}.accept_ra=0"

	ip -6 address add "\$ipv6" peer "\$host_ipv6/128" dev "\$interface"
	ip -6 neighbour replace "\$host_ipv6" lladdr "\$host_ll" nud permanent dev "\$interface"
	ip -6 route add "\$host_ipv6/128" dev "\$interface"
	ip -6 route add default via "\$host_ipv6" dev "\$interface"
else
	# Disable IPv6
	sysctl -q -w "net.ipv6.conf.\${interface}.disable_ipv6=1"
fi
EOF

# Enable packet forwarding
if [ -n "$forwarding" ]
then
	if [ -n "$ipv4" ]
	then
		sysctl -q -w "net.ipv4.conf.${host_interface}.forwarding=1"
	fi

	if [ -n "$ipv6" ]
	then
		sysctl -q -w "net.ipv6.conf.${host_interface}.forwarding=1"
	fi
fi

# Reset trap
trap 'clean_netns' EXIT
